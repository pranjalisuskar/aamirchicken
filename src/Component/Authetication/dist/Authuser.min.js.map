{"version":3,"sources":["Authuser.js"],"names":["_react","_interopRequireWildcard","require","_axios","_interopRequireDefault","_reactRouterDom","Authuser","navigate","useNavigate","_useState2","_slicedToArray","useState","tokenString","sessionStorage","getItem","JSON","parse","error","console","getToken","token","_useState4","userString","getUser","http","axios","create","baseURL","headers","Content-Type","Authorization","useEffect","defaults","concat","setToken","user","setItem","stringify","setUser","logout","clear"],"mappings":"4UAAA,IAAAA,OAAAC,wBAAAC,QAAA,UACAC,OAAAC,uBAAAF,QAAA,UACAG,gBAAAH,QAAA,izCAEA,IAAMI,SAAW,WACf,IAAMC,GAAW,EAAAF,gBAAAG,eADIC,EAAAC,gBAQH,EAAAV,OAAAW,UAJD,WARnB,IAUM,IAAMC,EAAcC,eAAeC,QAAQ,SATjD,OAAAF,EAAAG,KAAAC,MAAAJ,GAAA,KAWM,MAAOK,GAEP,OAZNC,QAAAD,MAAA,yBAAAA,GAYa,MAFOE,IARG,GAQjBC,EARiBX,EAAA,GAQVQ,EARUR,EAAA,GAAAY,EAAAX,gBASH,EAAAV,OAAAW,UAKF,WACd,IACE,IAAMW,EAAaT,eAAeC,QAAQ,QAC1C,OAAOQ,EAAaP,KAAKC,MAAMM,GAAc,KAC7C,MAAOL,GAEP,OADAC,QAAQD,MAAM,wBAAyBA,GAChC,MAXOM,IATG,GASjBL,EATiBG,EAAA,GASTJ,EATSI,EAAA,GAIrBG,EAAAC,OAAAA,QAAAC,OAAA,CAiCEC,QAAS,gCAvBXC,QAAa,CACXC,eAAI,sBACFC,cAAgBV,EAAGP,UAAAA,OAAeC,GAAQ,OAK3C,EAAAd,OAAA+B,WAAA,WAPHP,EAAAQ,SAAAJ,QAAAE,cAAAV,EAAA,UAAAa,OAAAb,GAAA,IAiCG,CAACA,IA/CiB,MAAA,CAAAc,SAwBH,SAACC,EAAMf,GAxBrBd,eAAW8B,QAAX9B,QAAiBS,KAAAsB,UAAAjB,IACrBP,eAAiBuB,QAAA,OAAArB,KAAAsB,UAAAF,IA0BfD,EAASd,GAvBXkB,EAAMnB,IAJeC,MAAAA,EA4DnBe,KAAAA,EA5DmBX,KAAAA,EAAAe,OA0BnB1B,WAyBAA,eAAe2B,QAxBfN,EAASd,MACTkB,EAAQH,MAJV5B,EAAA,iBA0CaD","file":"Authuser.min.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst Authuser = () => {\r\n  const navigate = useNavigate();\r\n\r\n  // Helper functions for session management\r\n  const getToken = () => {\r\n    try {\r\n      const tokenString = sessionStorage.getItem('token');\r\n      return tokenString ? JSON.parse(tokenString) : null;\r\n    } catch (error) {\r\n      console.error('Failed to parse token:', error);\r\n      return null;\r\n    }\r\n  };\r\n\r\n  const getUser = () => {\r\n    try {\r\n      const userString = sessionStorage.getItem('user');\r\n      return userString ? JSON.parse(userString) : null;\r\n    } catch (error) {\r\n      console.error('Failed to parse user:', error);\r\n      return null;\r\n    }\r\n  };\r\n\r\n  const saveToken = (user, token) => {\r\n    sessionStorage.setItem('token', JSON.stringify(token));\r\n    sessionStorage.setItem('user', JSON.stringify(user)); // Save user data\r\n    setToken(token);\r\n    setUser(user);\r\n  };\r\n  \r\n\r\n  const [token, setToken] = useState(getToken());\r\n  const [user, setUser] = useState(getUser());\r\n\r\n  // Create Axios instance with dynamic headers\r\n  const http = axios.create({\r\n    baseURL: 'http://localhost:5001/userAPI',\r\n    headers: {\r\n      'Content-Type': 'multipart/form-data',\r\n      Authorization: token ? `Bearer ${token}` : '', // Fix: Correct use of template literal\r\n    },\r\n  });\r\n\r\n  // Update axios headers whenever the token changes\r\n  useEffect(() => {\r\n    http.defaults.headers.Authorization = token ? `Bearer ${token}` : ''; // Fix: Correct use of template literal\r\n  }, [token]);\r\n\r\n  // Handle logout and navigate to home\r\n  const logout = () => {\r\n    sessionStorage.clear();\r\n    setToken(null);\r\n    setUser(null);\r\n    navigate('/');\r\n  };\r\n\r\n  return {\r\n    setToken: saveToken,\r\n    token,\r\n    user,\r\n    http,\r\n    logout,\r\n  };\r\n};\r\n\r\nexport default Authuser;"]}